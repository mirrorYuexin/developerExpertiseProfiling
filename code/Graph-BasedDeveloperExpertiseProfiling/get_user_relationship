# coding:utf-8
from __future__ import division

from user_sort.mysql.session import Session2_r as session2_r
from user_sort.mysql.session import Session2_w as session2_w

from user_sort.mysql.models import So_QuestionTag, So_Github_Users, So_Questions, So_Answers, So_User_Relation, \
    Github_ProjectTag, GithubProject, Github_Commits, Github_User_Relation, Github_User_Relation2, \
    Github_User_Relation3, Github_User_Relation4, Github_User_Relation6


def get_answerer_help():
    user_set=set()
    users = session2_r.query(So_Github_Users.so_user_id).all()
    for u in users:
        user_set.add(u.so_user_id)
    print len(user_set)

    question_tag_map = {}
    start_id = 0
    end_id = 100000
    final_id = 40000000
    step = 100000
    num = 0
    while start_id < final_id:
        print "start_id:" + str(start_id) + "     end_id:" + str(end_id) + "     final_id:" + str(final_id)
        qt_result = session2_r.query(So_QuestionTag).filter(So_QuestionTag.q_Id >= start_id, So_QuestionTag.q_Id < end_id).all()
        for qt in qt_result:
            num += 1
            q = qt.q_Id
            if q in question_tag_map:
                question_tag_map[q].add(qt.tag_Id)
            else:
                question_tag_map[q] = set([qt.tag_Id])
        start_id = end_id
        end_id = end_id + step
    print num

    num = 0
    for user in user_set:
        relation = {}
        q_result = session2_r.query(So_Questions.Id).filter(So_Questions.OwnerUserId == user).all()
        for q in q_result:
            tagset = question_tag_map[q.Id]
            a_result = session2_r.query(So_Answers.OwnerUserId).filter(So_Answers.ParentId == q.Id).all()
            for a in a_result:
                if a.OwnerUserId in user_set:
                    if a.OwnerUserId in relation:
                        for tag in tagset:
                            if tag in relation[a.OwnerUserId]:
                                relation[a.OwnerUserId][tag] += 1
                            else:
                                relation[a.OwnerUserId][tag] = 1
                    else:
                        relation[a.OwnerUserId] = {}
                        for tag in tagset:
                            relation[a.OwnerUserId][tag]=1

        for answerer in relation:
            for tag in relation[answerer]:
                num+=1
                so_user_relation = So_User_Relation()
                so_user_relation.asker = user
                so_user_relation.answerer = answerer
                so_user_relation.tag = tag
                so_user_relation.weight = relation[answerer][tag]
                session2_w.add(so_user_relation)
                if num % 100000 == 0:
                    try:
                        session2_w.commit()
                        print num
                    except Exception as e:
                        session2_w.rollback()
                        print e.message
                    finally:
                        pass
    if num % 100000 != 0:
        try:
            session2_w.commit()
            print num
        except Exception as e:
            session2_w.rollback()
            print e.message
        finally:
            pass
    print num


def get_coinvolved_projects():
    user_map={}
    users = session2_r.query(So_Github_Users).all()
    for u in users:
        user_map[u.github_user_id] = u.so_user_id
    print len(user_map)

    project_tag_map = {}
    start_id = 0
    end_id = 50000
    final_id = 45200000
    step = 50000
    num = 0
    while start_id < final_id:
        print "start_id:" + str(start_id) + "     end_id:" + str(end_id) + "     final_id:" + str(final_id)
        pt_result = session2_r.query(Github_ProjectTag.project_id,Github_ProjectTag.tag_id).filter(Github_ProjectTag.project_id >= start_id, Github_ProjectTag.project_id < end_id).all()
        for pt in pt_result:
            num += 1
            p = pt.project_id
            if p in project_tag_map:
                project_tag_map[p].add(pt.tag_id)
            else:
                project_tag_map[p] = set([pt.tag_id])
        start_id = end_id
        end_id = end_id + step
    print num

    project_set = set()
    projects = session2_r.query(GithubProject.id).all()
    for p in projects:
        project_set.add(p.id)
    print len(project_set)



    project_commiter_map = {}
    for p in project_set:
        commiter=set()
        pc_result = session2_r.query(Github_Commits.author_id).filter(Github_Commits.project_id == p).distinct()
        for pc in pc_result:
            if pc.author_id in user_map:
                commiter.add(user_map[pc.author_id])
        if len(commiter)>1:
            project_commiter_map[p] = commiter
    print len(project_commiter_map)


    num = 0
    for user in user_map:
        user_so_id = user_map[user]
        relation = {}
        p_result = session2_r.query(Github_Commits.project_id).filter(Github_Commits.author_id == user).distinct()
        for p in p_result:
            if p.project_id in project_commiter_map:
                commiter = project_commiter_map[p.project_id]
                userlist=[]
                for c in commiter:
                    if c > user_so_id:
                        userlist.append(c)
                if len(userlist) > 0:
                    if p.project_id in project_tag_map:
                        tagset = project_tag_map[p.project_id]
                        for u in userlist:
                            if u in relation:
                                for tag in tagset:
                                    if tag in relation[u]:
                                        relation[u][tag] += 1
                                    else:
                                        relation[u][tag] = 1
                            else:
                                relation[u] = {}
                                for tag in tagset:
                                    relation[u][tag] = 1

        for u in relation:
            for tag in relation[u]:
                num += 1
                github_user_relation = Github_User_Relation()
                github_user_relation.user1 = user_so_id
                github_user_relation.user2 = u
                github_user_relation.tag = tag
                github_user_relation.weight = relation[u][tag]
                session2_w.add(github_user_relation)
                if num % 100000 == 0:
                    try:
                        session2_w.commit()
                        print num
                    except Exception as e:
                        session2_w.rollback()
                        print e.message
                    finally:
                        pass
    if num % 100000 != 0:
        try:
            session2_w.commit()
            print num
        except Exception as e:
            session2_w.rollback()
            print e.message
        finally:
            pass
    print num


def get_reviewed_relation():

    user_map={}
    users = session2_r.query(So_Github_Users).all()
    for u in users:
        user_map[u.github_user_id] = u.so_user_id
    print len(user_map)


    project_tag_map = {}
    start_id = 0
    end_id = 50000
    final_id = 45200000
    step = 50000
    num = 0
    while start_id < final_id:
        print "start_id:" + str(start_id) + "     end_id:" + str(end_id) + "     final_id:" + str(final_id)
        pt_result = session2_r.query(Github_ProjectTag.project_id,Github_ProjectTag.tag_id).filter(Github_ProjectTag.project_id >= start_id, Github_ProjectTag.project_id < end_id).all()
        for pt in pt_result:
            num += 1
            p = pt.project_id
            if p in project_tag_map:
                project_tag_map[p].add(pt.tag_id)
            else:
                project_tag_map[p] = set([pt.tag_id])
        start_id = end_id
        end_id = end_id + step
    print num

    commit_result = session2_r.query(Github_Commits.project_id, Github_Commits.committer_id, Github_Commits.author_id).filter(Github_Commits.author_id != Github_Commits.committer_id).all()
    relation = {}
    num0 = 0
    num1 = 0
    num2 = 0
    for c in commit_result:
        num0 += 1
        if c.author_id in user_map and c.committer_id in user_map and c.project_id in project_tag_map:
            num1 += 1
            author = user_map[c.author_id]
            reviewer = user_map[c.committer_id]
            tagset = project_tag_map[c.project_id]
            if not (author in relation):
                relation[author] = {}
            if not (reviewer in relation[author]):
                relation[author][reviewer] = {}
            for tag in tagset:
                num2 += 1
                if not (tag in relation[author][reviewer]):
                    relation[author][reviewer][tag] = 0
                relation[author][reviewer][tag] += 1
    print num0, num1, num2


    num = 0
    for author in relation:
        for reviewer in relation[author]:
            for tag in relation[author][reviewer]:
                num += 1
                github_user_relation = Github_User_Relation3()
                github_user_relation.author = author
                github_user_relation.reviewer = reviewer
                github_user_relation.tag = tag
                github_user_relation.weight = relation[author][reviewer][tag]
                session2_w.add(github_user_relation)
                if num % 100000 == 0:
                    session2_w.commit()
                    print num
    if num % 100000 != 0:
        session2_w.commit()
        print num
    print num


def main_do():
    get_answerer_help()
    get_coinvolved_projects()
    get_reviewed_relation()
if __name__ == '__main__':
    main_do()