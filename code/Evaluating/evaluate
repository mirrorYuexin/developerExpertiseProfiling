# coding:utf-8
from __future__ import division

import copy
import os
import cPickle as pickle
from user_sort.mysql.session import Session0 as session0
from user_sort.mysql.session import Session1 as session1
from user_sort.mysql.session import Session2_r as session2_r
from user_sort.mysql.models import Tags, So_Test_Question_Tag, Test2, So_Test2_Question_Tag, Test, Questions
from time import time


def get_testdata():

    tag_threshold = 5000
    tagset = set()
    tags = session1.query(Tags).filter(Tags.Count > tag_threshold).all()
    for t in tags:
        tagset.add(t.Id)

    question_tag_map = {}
    question_answer_map = {}
    questions = session2_r.query(Test.q_id).filter(Test.selected == 1).distinct()
    # questions = session2_r.query(Test2.q_id).filter(Test2.selected == 1).distinct()
    for q in questions:
        # question_tag_map[q.q_id] = []
        question_answer_map[q.q_id] = {}
        tags = session2_r.query(So_Test_Question_Tag.tag_Id).filter(So_Test_Question_Tag.q_Id == q.q_id).all()
        # tags = session2_r.query(So_Test2_Question_Tag.tag_Id).filter(So_Test2_Question_Tag.q_Id == q.q_id).all()
        for t in tags:
            if t.tag_Id in tagset:
                if q.q_id not in question_tag_map:
                    question_tag_map[q.q_id] = []
                question_tag_map[q.q_id].append(t.tag_Id)

 
        result = session2_r.query(Test.a_id, Test.a_owner_id, Test.groundScore, Test.groundRank, Test.SMDTScore).filter(
            Test.q_id == q.q_id, Test.selected == 1).all()
        # result = session2_r.query(Test2.a_id, Test2.a_owner_id, Test2.groundScore, Test2.groundRank, Test2.SMDTScore).filter(Test2.q_id == q.q_id, Test2.selected == 1).all()
        for a in result:
            question_answer_map[q.q_id][a.a_id] = []
            question_answer_map[q.q_id][a.a_id].append(a.a_owner_id)
            question_answer_map[q.q_id][a.a_id].append(a.groundScore)
            question_answer_map[q.q_id][a.a_id].append(a.groundRank)

    return question_tag_map, question_answer_map

def get_final_accuracy(file, question_tag_map_temp, question_answer_map_temp, finaltestfile):
 
    question_tag_map = copy.deepcopy(question_tag_map_temp)
    question_answer_map = copy.deepcopy(question_answer_map_temp)
    if os.path.exists(finaltestfile):
        with open(finaltestfile, 'r') as data:
            final_test_list = pickle.load(data)

    user_tag_ability = {}
    f = open(file, 'r')
    num = 0
    for line in f.readlines():
        uta = line.split(',')
        user = int(uta[0])
        tag = int(uta[1])
        ability = float(uta[2].strip())
        if user in user_tag_ability:
            user_tag_ability[user][tag] = ability
        else:
            user_tag_ability[user] = {}
            user_tag_ability[user][tag] = ability
        num += 1


    accuracy = 0
    pairNum = 0

    for answers in final_test_list:
        pairNum+=1
        q = answers[0][0]
        taglist = question_tag_map[q]
        for answer in answers:
            predscore = 0
            user = answer[2]
            for t in taglist:
                predscore += user_tag_ability[user][t]
            answer.append(predscore)

        if answers[0][5]>answers[1][5]:
            accuracy+=1
    accuracy = accuracy / pairNum
    print accuracy,pairNum


def main_do():
    question_tag_map, question_answer_map = get_testdata()
    test_data = "test_data.csv"

    # baseline
    # so
    Indegree = "Indegree.csv"
    zscore = "Z_Score.csv"
    expertise_rank = "expertise_rank.csv"
    topic_sensitive_pagerank = "topic_sensitive_pagerank.csv"
    get_final_accuracy(Indegree, question_tag_map, question_answer_map, test_data)
    get_final_accuracy(zscore, question_tag_map, question_answer_map, test_data)
    get_final_accuracy(expertise_rank, question_tag_map, question_answer_map, test_data)
    get_final_accuracy(topic_sensitive_pagerank, question_tag_map, question_answer_map, test_data)


    # gh
    GDP = "GDP.csv"
    get_final_accuracy(GDP, question_tag_map, question_answer_map, test_data)
    
    #across communities
    CPDScore = "CDPScore.csv"
    get_final_accuracy(CPDScore, question_tag_map, question_answer_map, test_data)
    
    # our approach
    so_file = "so.csv"
    github_file = "gh.csv"
    so_github_file = "so_gh.csv"
    profile_file = "profile_file".csv"
    get_final_accuracy(so_file, question_tag_map, question_answer_map, test_data)
    get_final_accuracy(github_file, question_tag_map, question_answer_map, test_data)
    get_final_accuracy(so_github_file, question_tag_map, question_answer_map, test_data)
    get_final_accuracy(profile_file, question_tag_map, question_answer_map, test_data)

    model_without_dynamics_filepath = "no_dynamics.csv"
    get_final_accuracy(model_without_dynamics_filepath, question_tag_map, question_answer_map, test_data)

if __name__ == '__main__':
    main_do()




