# coding:utf-8
from __future__ import division

import os
import cPickle as pickle

import datetime

import math
from sqlalchemy import func

from user_sort.mysql.models import So_User_Tag, So_Question_Difficulty, So_QuestionTag, Answers, So_Answers, \
    Github_ProjectTag, So_Github_Users, GithubProject, Github_Commits, Tags
from user_sort.mysql.session import Session2_r as session2_r
from user_sort.mysql.session import Session1 as session1


'''
github的对比试验
论文“Matching GitHub developer profiles to job advertisements”
用tfidf打分
'''

def get_map():
    # 得到所有需要的map

    tag_threshold = 5000
    tagset = set()
    tags = session1.query(Tags).filter(Tags.Count > tag_threshold).all()
    for t in tags:
        tagset.add(t.Id)
    print len(tagset)

    # 先查出所有用户，存入user_map
    user_map={}
    users = session2_r.query(So_Github_Users).all()
    for u in users:
        user_map[u.so_user_id] = u.github_user_id
    # print len(user_map)

    # 查出project和对应的tagid，存入project_tag_map
    project_tag_map = {}
    start_id = 0
    end_id = 50000
    final_id = 45200000
    step = 50000
    num = 0
    while start_id < final_id:
        print "start_id:" + str(start_id) + "     end_id:" + str(end_id) + "     final_id:" + str(final_id)
        pt_result = session2_r.query(Github_ProjectTag.project_id, Github_ProjectTag.tag_id).filter(
            Github_ProjectTag.project_id >= start_id, Github_ProjectTag.project_id < end_id).all()
        for pt in pt_result:
            num += 1
            if pt.tag_id in tagset:
                p = pt.project_id
                if p in project_tag_map:
                    project_tag_map[p].add(pt.tag_id)
                else:
                    project_tag_map[p] = set([pt.tag_id])
        start_id = end_id
        end_id = end_id + step
    print num

    # 查出这些用户相关的projects
    user_project_map = {}
    i = 0
    for u in user_map:
        u_gh = user_map[u]
        user_project_map[u] = set()
        projects = session2_r.query(Github_Commits.project_id).filter(Github_Commits.author_id == u_gh).distinct()
        for p in projects:
            user_project_map[u].add(p.project_id)
        i+=1

    return project_tag_map, user_project_map, tagset


def get_user_ability(cache_file, file, project_tag_map, user_project_map, tagset):
    # 计算用户能力,cache_file为保存user_tag的文件

    user_tag_map = {}
    users = session2_r.query(So_Github_Users.so_user_id).all()
    for u in users:
        user_tag_map[u.so_user_id]={}
        for t in tagset:
            user_tag_map[u.so_user_id][t]=0.0

    tag_user_map = {}
    for t in tagset:
        tag_user_map[t] = set()

    i=0
    for u in user_project_map:
        num = 0
        for p in user_project_map[u]:
            if p in project_tag_map:
                tags = project_tag_map[p]
                for t in tags:
                    if u in user_tag_map and t in user_tag_map[u]:
                        num += 1
                        user_tag_map[u][t] += 1
                        tag_user_map[t].add(u)
        for t in user_tag_map[u]:
            if user_tag_map[u][t]!=0:
                user_tag_map[u][t] = user_tag_map[u][t]/num
        i+=1

    idf_map = {}
    for t in tag_user_map:
        idf_map[t] = math.log(len(user_tag_map)/(1+len(tag_user_map[t])),10)



    for u in user_tag_map:
        for t in user_tag_map[u]:
            user_tag_map[u][t] = user_tag_map[u][t] * idf_map[t]

    print "user_tag_map end:" + str(num)


    print ("file_exists:", os.path.exists(cache_file))
    if os.path.exists(cache_file):
        with open(cache_file, 'r') as data:
            user_tag = pickle.load(data)
            f = open(file, 'a')
            for u in user_tag_map:
                for t in user_tag_map[u]:
                    if u in user_tag and t in user_tag[u]:
                        f.write(str(u) + "," + str(t) + "," + str(user_tag_map[u][t]) + "\r\n")



def main_do():
    cache_file = "GDP.csv"
    project_tag_map, user_project_map, tagset = get_map()

    file = "/sdpdata1/python/project/user_sort/user_sort/result/github/gh_baseline.csv"
    get_user_ability(cache_file, file, project_tag_map, user_project_map, tagset)


if __name__ == '__main__':
    main_do()
