# coding:utf-8
from __future__ import division

import os
import cPickle as pickle

import datetime

import math

from user_sort.mysql.models import So_User_Tag, So_Question_Difficulty, So_QuestionTag, Answers, So_Answers, \
    So_Github_Users, Github_User_Tag, Tags
from user_sort.mysql.session import Session2_r as session2_r
from user_sort.mysql.session import Session1 as session1

#seke论文的简单实现，调整a的值从0到1，间隔为0.1
def get_user_ability_file(cache_file, so_file, github_file, sogh_file,w1,w2):
    # 结合用户在so上的能力和在github上的能力

    print (cache_file, " exists:", os.path.exists(cache_file))
    if not os.path.exists(cache_file):
        return
    with open(cache_file, 'r') as data:
        user_tag=pickle.load(data)

    user_tag_ability = {}
    for u in user_tag:
        user_tag_ability[u] = {}
        for t in user_tag[u]:
            user_tag_ability[u][t] = 0.0

    # 计算用户能力
    # so
    f = open(so_file, 'r')
    for line in f.readlines():
        # 三列，依次为user,tag,ability
        uta = line.split(',')
        user = int(uta[0])
        tag = int(uta[1])
        ability = float(uta[2].strip())
        user_tag_ability[user][tag] = w1 * ability
    # github
    f = open(github_file, 'r')
    for line in f.readlines():
        # 三列，依次为user,tag,ability
        uta = line.split(',')
        user = int(uta[0])
        tag = int(uta[1])
        ability = float(uta[2].strip())
        user_tag_ability[user][tag] += w2 * ability

    f = open(sogh_file, 'a')
    for u in user_tag_ability:
        for t in user_tag_ability[u]:
            f.write(str(u) + "," + str(t) + "," + str(user_tag_ability[u][t]) + "\r\n")


def main_do():
    cache_file = "/sdpdata1/python/project/user_sort/user_sort/result/test/user_tag_cache_file.csv"

    # so_file = "/sdpdata1/python/project/user_sort/user_sort/HIN/baseline/seke/so_0.csv"
    # github_file = "/sdpdata1/python/project/user_sort/user_sort/HIN/baseline/seke/gh_0.csv"
    # user_ability_file = "/sdpdata1/python/project/user_sort/user_sort/HIN/baseline/seke/sogh_0_"
    # for i in range(11):
    #     w1 = 0.1 * i
    #     w2 = 1 - w1
    #     user_ability_file_temp = user_ability_file+str(i)+".csv"
    #     print w1,w2,user_ability_file_temp
    #     get_user_ability_file(cache_file, so_file, github_file, user_ability_file_temp,w1,w2)
    #
    # so_file = "/sdpdata1/python/project/user_sort/user_sort/HIN/baseline/seke/so_1.csv"
    # github_file = "/sdpdata1/python/project/user_sort/user_sort/HIN/baseline/seke/gh_1.csv"
    # user_ability_file = "/sdpdata1/python/project/user_sort/user_sort/HIN/baseline/seke/sogh_1_"
    # for i in range(11):
    #     w1 = 0.1 * i
    #     w2 = 1 - w1
    #     user_ability_file_temp = user_ability_file+str(i)+".csv"
    #     print w1,w2,user_ability_file_temp
    #     get_user_ability_file(cache_file, so_file, github_file, user_ability_file_temp,w1,w2)

    so_file = "so_2.csv"
    github_file = "gh_2.csv"
    user_ability_file = "/sdpdata1/python/project/user_sort/user_sort/HIN/baseline/seke/CDPScore_"
    for i in range(11):

        w1 = 0.1 * i
        w2 = 1 - w1
        user_ability_file_temp = user_ability_file+str(i)+".csv"
        print w1,w2,user_ability_file_temp
        get_user_ability_file(cache_file, so_file, github_file, user_ability_file_temp,w1,w2)

if __name__ == '__main__':
    main_do()
